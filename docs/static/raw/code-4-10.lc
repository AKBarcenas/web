let TRUE  = \x y -> x
-- TRUE x y = x
let FALSE = \x y -> y
-- FALSE x y = y
let ITE   = \b xT xE -> (b xT xE)
-- ITE b xT xE = b xT xE

let AND = \b1 b2 -> ITE b1 (ITE b2 TRUE FALSE) FALSE

let OR = \b1 b2 -> b1 TRUE b2
let NOT = \b -> b FALSE TRUE

let bar = (\x -> \y -> x)

let PACK = \v1 v2 b -> ITE b v1 v2
        -- \v1 -> (\v2 b -> ITE b v1 v2)
        -- \v1 v2 -> (\b -> ITE b v1 v2)
        -- \v1 -> (\v2 -> (\b -> ITE b v1 v2))
-- PACK v1 v2 = \b -> ITE b v1 v2

let FST  = \r -> r TRUE
-- FST r = r TRUE

let SND  = \r -> r FALSE
-- SND r = r FALSE

-- let ZERO  = \f x -> x
-- let ONE   = \f x -> (f x)
-- let TWO   = \f x -> f (f x)
-- let THREE = \f x -> f (f (f x))
-- let FOUR  = \f x -> f (f (f (f x)))
-- let FIVE  = \f x -> f (f (f (f (f x))))
-- let FIX   = \f x -> f (f (f (f (f (f x)))))

let ISZERO = \n -> (n (\z -> FALSE) TRUE)

eval isz_zero :
  ISZERO ZERO =~> TRUE
eval isz_one :
  ISZERO ONE =~> FALSE
eval isz_one :
  ISZERO TWO =~> FALSE
eval isz_one :
  ISZERO THREE =~> FALSE
eval isz_one :
  ISZERO FOUR =~> FALSE
eval isz_one :
  ISZERO FALSE =~> FALSE

-- ADD
-- SUB
-- MUL








--  (bar x y) = x
--  bar GORILLA KONG ====> GORILLA

-- (bar("apple"))("orange")
-- > var bar = function(x){
-- ...   return function(y){
-- .....     return x
-- .....   }
-- ... }
-- undefined
-- > (bar("apple"))("orange")



-- let name = \x1 x2 x3 -> e
-- name x1 x2 x3 =====> e

let id  = \x -> x
--  id x ====> x
--  id GORILLA ===> GORILLA
--  id KONG ===> KONG

eval q1 :
  (bar apple orange)
  =d> ((\x y -> x) apple orange)
  =b> ((\y -> apple) orange)
  =b> apple

eval ite_true :
  ITE TRUE apple orange
  =*> TRUE apple orange
  =*> apple

eval ite_false :
  ITE FALSE apple orange
  =*> FALSE apple orange
  =*> orange

-- TRUE ==> FALSE
-- FALSE ==> TRUE
-- function(b){ return (b ? false : true) }
-- \b -> ITE b FALSE TRUE

-- function(b1, b2){ return b1 ? (b2 ? true : false) : false }
-- function(b1, b2){ return b1 ? b2 : false }
-- let AND = \b1 b2 -> ITE b1 (ITE b2 TRUE FALSE) FALSE

eval check_ite :
  (\b1 b2 -> ITE b1 b2 FALSE)
  =*> (\b1 b2 -> b1 b2 FALSE)

-- function(b1, b2){ return b1 ? true : b2 }
-- \b1 b2 -> ITE b1 TRUE b2
-- let OR = \b1 b2 -> b1 TRUE b2
-- 14
----

eval ex_fst :
  FST (PACK APPLE ORANGE)
  =*> (PACK APPLE ORANGE) TRUE
  =*> (\b -> ITE b APPLE ORANGE) TRUE
  =*> (\b -> b APPLE ORANGE) TRUE
  =b> TRUE APPLE ORANGE
  =*> APPLE

eval ex_snd :
  SND (PACK APPLE ORANGE)
  =*> SND (\b -> ITE b APPLE ORANGE)
  =*> (\b -> ITE b APPLE ORANGE) FALSE
  =b> ITE FALSE APPLE ORANGE
  =*> ORANGE
